const jwt = require("jsonwebtoken");
const { User } = require("../models");

const authMiddleware = (roles = []) => async (req, res, next) => {
  const token = req.header("Authorization")?.split(" ")[1];

  if (!token) {
    console.log("üî¥ –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    return res.status(401).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log("üü¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", decoded);

    req.user = await User.findByPk(decoded.id);

    if (!req.user) {
      return res.status(401).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (roles.length && !roles.includes(req.user.role)) {
      console.log(`üî¥ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å "${req.user.role}", –Ω–æ –Ω—É–∂–µ–Ω: ${roles}`);
      return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" });
    }

    console.log("üîµ Middleware –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");
    next();
  } catch (error) {
    console.log("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error.message);
    return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
  }
};

module.exports = authMiddleware;
