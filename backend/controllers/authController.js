const { User, TeacherRequest, Course } = require("../models");
const authMiddleware = require("../middleware/authMiddleware");
const { eveNgClient } = require("../config/eveNgClient");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const generateToken = (user) => {
  return jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "24h" });
};

exports.register = async (req, res) => {
  try {
    const { username, email, password, role } = req.body;

    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ error: "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
    }

    if (role === "teacher") {
      await TeacherRequest.create({
        username,
        email,
        password, 
        status: "pending",
      });

      return res.json({ message: "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await User.create({
      username,
      email,
      password: hashedPassword,
      role,
      approved: role === "admin" ? true : false,
    });

    try {
      const response = await eveNgClient.post("/api/folders", {
        path: "/",
        name: `${newUser.id}_` + username,
      });

      if (response.data.status !== "success") {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏");
      }

      console.log(`üìÇ –ü–∞–ø–∫–∞ '${username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ EVE-NG`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤ EVE-NG:", error.response?.data || error.message);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤ EVE-NG" });
    }

    const token = generateToken(newUser);
    res.json({ token, user: { id: newUser.id, username, email, role } });

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

exports.login = async (req, res) => {
  console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥:", req.body);
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ where: { email } });
    if (!user) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!");
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    if (user.role === "teacher" && !user.approved) {
      return res.status(403).json({ error: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" });
    }

    const token = generateToken(user);
    res.json({ token, user: { id: user.id, username: user.username, email, role: user.role } });

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

exports.getProfile = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: ["id", "username", "email", "role"],
      include: {
        model: Course,
        as: "courses",
        through: { attributes: [] },
      },
    });

    if (!user) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    if (user.role === "teacher") {
      res.json({
        user,
        courses: user.courses || [],
        message: "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
      });
    } else if (user.role === "student") {
      res.json({
        user,
        courses: user.courses || [],
        message: "–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞",
      });
    } else {
      res.status(400).json({ error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å" });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};