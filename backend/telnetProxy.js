const WebSocket = require("ws");
const { Telnet } = require("telnet-client");

const wss = new WebSocket.Server({ port: 5001 });

wss.on("connection", async (ws) => {
  console.log("üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telnet Proxy");

  const connection = new Telnet();

  const telnetParams = {
    host: "192.168.116.128", // –í–∞—à IP-–∞–¥—Ä–µ—Å
    port: 32769, // –í–∞—à –ø–æ—Ä—Ç
    negotiationMandatory: false,
    timeout: 1500,
  };

  try {
    await connection.connect(telnetParams);
    console.log("‚úÖ Telnet —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telnet –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–æ WebSocket
    connection.on("data", (data) => {
      ws.send(data.toString());
    });

    let commandBuffer = "";

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ WebSocket
    ws.on("message", async (message) => {
      try {
        commandBuffer += message;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
        if (commandBuffer.includes("\r") || commandBuffer.includes("\n")) {
          console.log("üíª –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ Telnet:", commandBuffer.trim());
          await connection.send(commandBuffer);
          commandBuffer = ""; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ Telnet:", err);
      }
    });

    ws.on("close", () => {
      console.log("‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
      connection.end();
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ Telnet:", error);
    ws.send(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
    ws.close();
  }
});

console.log("üöÄ Telnet Proxy WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001");
